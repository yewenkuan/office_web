<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.1.xsd"
       default-lazy-init="true">

    <description>Shiro Configuration</description>

    <context:property-placeholder ignore-unresolvable="true" location="classpath:application.properties"/>

    <!-- 安全认证过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="filters">
            <map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
            </map>
        </property>
        <property name="filterChainDefinitions">
            <ref bean="shiroFilterChainDefinitions"/>
        </property>
    </bean>

    <!-- Shiro权限过滤过滤器定义  ${mobilePath}/** = mobile-->
    <bean name="shiroFilterChainDefinitions" class="java.lang.String">
        <constructor-arg>
            <value>
                <!--/user/login = authc &lt;!&ndash; 这个配置了，因为 /user/login是登陆页面，shiro判断这个登陆请求如何和配置的登陆地址一致的话，则放行&ndash;&gt;-->
                /officeWeb/** = authc
            </value>
        </constructor-arg>
    </bean>


    <!-- 本地登录认证过滤器 -->
    <bean id="formAuthenticationFilter" class="com.example.office_web.shiro.CustomFormAuthenticationFilter">
        <property name="loginUrl" value="/user/login"/><!-- 这个应该是登陆的url，不是拦截的路径 -->
    </bean>


    <!-- 会话Cookie模板-->
    <!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,
    当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失!
    默认JSESSIONID，同tomcat/jetty在cookie中缓存标识相同，修改用于防止访问404页面时，容器生成的标识把shiro的覆盖掉
    -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg name="name" value="OFFICEWEBSESSIONID"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>

    <!-- 定义Shiro安全管理配置  SecurityManager是shiro的核心，它负责与shiro的其他组件进行交互-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="systemAuthorizingRealm"/>
        <property name="sessionManager" ref="sessionManager"/>


    </bean>

    <!-- 系统安全认证实现类配置 -->
    <bean id="systemAuthorizingRealm" class="com.example.office_web.shiro.MyRealm">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="name" value="${shiroReam}"/>
        <property name="authorizationCacheName" value="${authorizationCacheName}" />
    </bean>

    <!-- 自定义会话管理配置  默认情况下，session的管理由DefaultSecurityManager或DefaultWebSecurityManager中的SessionManager来负责。SessionManager 的父类有start方法创建session
    https://www.cnblogs.com/youzhibing/p/9679134.html
    -->
    <bean id="sessionManager" class="com.example.office_web.shiro.SessionManager">
        <property name="sessionDAO" ref="sessionDAO"/><!--如DefaultSessionManager在创建完session后会调用sessionDAO的doCreate实现会话的持久化； -->
        <property name="globalSessionTimeout" value="60000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <!-- 是否开启会话验证器任务 默认true -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
    </bean>


    <!--
        定时清理僵尸session，Shiro会启用一个后台守护线程定时执行清理操作
        用户直接关闭浏览器造成的孤立会话
    -->
    <bean id="sessionValidationScheduler"
          class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <property name="interval" value="60000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>



    <!-- 自定义Session存储容器 采用二级缓存来处理，本地缓存ehcache+redis-->
    <bean id="sessionDAO" class="com.example.office_web.shiro.MyJedisSessionDAO">

    </bean>


    <bean id="cacheManager" class="com.example.office_web.shiro.cache.OfficeWebCacheManager" />

</beans>